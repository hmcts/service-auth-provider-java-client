plugins {
    id 'pmd'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.springframework.boot' version '2.7.3'
    id 'org.owasp.dependencycheck' version '7.2.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'au.com.dius.pact' version '4.1.11'
}

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "0.0.1-SNAPSHOT"

group 'uk.gov.hmcts.reform'
version buildNumber

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.18'
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "6.12.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

allprojects {
    sourceCompatibility = 11
    targetCompatibility = 11
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task contract(type: Test) {
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

artifacts {
    archives sourcesJar
    archives javadocJar
}

def gitRepo = "https://github.com/hmcts/service-auth-provider-java-client"

publishing {
    publications {
        Main(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Service auth provider API client'
                description = 'IDAM service auth provider API'
                url = gitRepo
                licenses {
                    license {
                        name = 'MIT License, Copyright (c) 2019 HM Courts & Tribunals Service'
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
                scm {
                    url = gitRepo
                }
            }
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.4'
    compile group: 'io.github.openfeign', name: 'feign-jackson', version: '10.12'
    compile group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
    compile group: 'com.auth0', name: 'java-jwt', version: '3.12.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    testCompile group: 'junit', name: 'junit', version: '4.13.1'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.18.1'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    integrationTestCompile sourceSets.main.runtimeClasspath
    integrationTestCompile sourceSets.test.runtimeClasspath
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.4'

    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.1.11'
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.1.11'
    contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

dependencyManagement {
    dependencies {
        dependency group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}

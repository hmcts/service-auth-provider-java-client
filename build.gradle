plugins {
    id 'pmd'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
}

group 'uk.gov.hmcts.reform'
version '3.0.0'

checkstyle {
    maxWarnings = 0
    toolVersion = '8.18'
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "6.12.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

sourceCompatibility = 1.8

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    jcenter()
    mavenLocal()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def gitRepo = "https://github.com/hmcts/service-auth-provider-java-client"

publishing {
    publications {
        Main(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Service auth provider API client'
                description = 'IDAM service auth provider API'
                url = gitRepo
                licenses {
                    license {
                        name = 'MIT License, Copyright (c) 2019 HM Courts & Tribunals Service'
                        url = "http://www.opensource.org/licenses/mit-license.php"
                    }
                }
                scm {
                    url = gitRepo
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = 'service-auth-provider-client'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/service-auth-provider-java-client'
        version {
            name = project.version
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.1.1.RELEASE'
    compile group: 'io.github.openfeign', name: 'feign-jackson', version: '10.2.0'
    compile group: 'com.warrenstrange', name: 'googleauth', version: '1.1.5'
    compile group: 'com.auth0', name: 'java-jwt', version: '3.4.0'

    compileOnly group: 'uk.gov.hmcts.reform', name: 'java-logging', version: '5.0.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.10.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

dependencyManagement {
    dependencies {
        dependency group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

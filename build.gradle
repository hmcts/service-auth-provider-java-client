plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.4.5'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id 'au.com.dius.pact' version '4.6.17'
    id 'uk.gov.hmcts.java' version '0.12.65'
}

def buildNumber = System.getenv("RELEASE_VERSION")?: "0.0.1-SNAPSHOT"

group = 'com.github.hmcts'
version = buildNumber

def configureSourceSet(String name) {
    sourceSets.create(name) { sourceSet ->
        sourceSet.java {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
            srcDir "src/${name}/java"
        }
        sourceSet.resources.srcDir "src/${name}/resources"
    }
}

['contractTest', 'integrationTest'].each { configureSourceSet(it) }


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.2.1'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.6'
    implementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.5.0'
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.1.0'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.2.1'
    integrationTestImplementation sourceSets.test.runtimeClasspath

    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.6.17'
    contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.6.17'
    contractTestImplementation sourceSets.test.runtimeClasspath
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

jar {
    enabled = true
    archiveClassifier = ''
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

tasks.register('printVersion') {
    doLast {
        print project.version
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.register('integration', Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.register('contract', Test) {
    description = 'Runs the consumer Pact tests'
    group = 'Verification'
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.rootDir', "pacts"
}

tasks.register('runAndPublishConsumerPactTests', Test) {
    description = 'Runs the contract tests and publishes pacts to the broker.'
    group = 'Verification'
    dependsOn 'contract'
    finalizedBy 'pactPublish'
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def gitRepo = "https://github.com/hmcts/service-auth-provider-java-client"

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifactId = 'service-auth-provider-java-client'

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Service auth provider API client'
                description = 'IDAM service auth provider API'
                url = gitRepo
                licenses {
                    license {
                        name = 'MIT License, Copyright (c) 2023 HM Courts & Tribunals Service'
                        url = "https://www.opensource.org/licenses/MIT"
                    }
                }
                scm {
                    url = gitRepo
                }
            }
        }
    }

    repositories {
        maven {
            name = "AzureArtifacts"
            url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
            credentials {
                username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
                password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
            }
        }
    }
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

bootJar {
    enabled = false
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.WARN
}